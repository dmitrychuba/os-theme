// This is the default html and body font-size for the base rem value.
$rem-base           : 16px !default;
$fonts-base         : '../fonts' !default;
//
// @functions
//

@function font-url($font, $only-path:false, $cache-booster:false) {
    @if ($cache-booster) {
        $qm-index : str-index($font, '?');

        @if ($qm-index) {
            $font : "#{$font}cb#{random(5000)}";
        } @else {
            $font : "#{$font}?cb#{random(5000)}";
        }
    }
    @if ($only-path) {
        $font : "#{$fonts-base}/#{$font}";
    } @else {
        $font : "url(#{$fonts-base}/#{$font})";
    }
    @return unquote($font);
}

@function image-url($image, $only-path:false, $cache-booster:true) {

    @if ($cache-booster) {
        $image : "#{$image}?cb#{random(5000)}";
    }
    @if ($only-path) {
        $image : "../images/#{$image}";
    } @else {
        $image : "url(../images/#{$image})";
    }
    @return unquote($image);
}

// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range) {
    @if length($range) <= 0 {
        @return 0;
    }
    @return nth($range, 1);
}

@function upper-bound($range) {
    @if length($range) < 2 {
        @return 999999999999;
    }
    @return nth($range, 2);
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value : $rem-base) {
    $value : strip-unit($value) / strip-unit($base-value) * 1rem;
    @if ($value == 0rem) {
        $value : 0;
    }
    // Turn 0rem into 0
    @return $value;
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

@function rem-calc($values, $base-value : $rem-base) {
    $max : length($values);

    @if $max == 1 {
        @return convert-to-rem(nth($values, 1), $base-value);
    }

    $remValues : ();
    @for $i from 1 through $max {
        $remValues : append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $remValues;
}

// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function emCalc($values) {
    @return rem-calc($values);
}

// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function em-calc($values) {
    @return rem-calc($values);
}

@function font-family($font-name:false) {
    @if ($font-name == false) {
        @return Helvetica, sans-serif;
    } @else {
        @return $font-name, Helvetica, sans-serif;
    }
}

@function font-name($font-name:false) {
    @return font-family($font-name);
}

@function str-replace($string, $search, $replace: '') {
    $index : str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@function cb($values) {
    @return cubic-bezier(nth($values, 1), nth($values, 2), nth($values, 3), nth($values, 4));
}

@function reverse-cb($values) {
    @return cubic-bezier(1 - nth($values,3), 1 - nth($values,4), 1 - nth($values,1), 1 - nth($values, 2));
}

@function f($size-in-px, $line-height, $font-name) {

    @if ($line-height == false) {
        @return rem-calc($size-in-px) font-name($font-name);
    } @else {
        @return unquote(rem-calc($size-in-px)+'/'+rem-calc($line-height)) font-name($font-name);
    }
}

@function img-url($image) {
    @return url('../images/#{$image}?#{unique-id()}');
}

@function font-folder-url($folder) {
    @return '../fonts/#{$folder}';
}

@function image-folder-url($folder) {
    @return '../images/#{$folder}';
}

@function percentage-calc($size-in-px, $width : 1024) {
    @return $size-in-px*100%/$width;
}

@function subtract-percent($px-value, $percent) {
    @return $px-value - $px-value * $percent / 100;
}

@function round-up-even($num) {
    @if (strip-unit($num) % 2 != 0) {
        $num : $num + 1;
    }
    @return $num;
}

@mixin aspect-ratio($width, $height) {
    position : relative;
    &:before {
        display     : block;
        content     : "";
        width       : 100%;
        padding-top : ($height / $width) * 100%;
    }
    > .content {
        position : absolute;
        top      : 0;
        left     : 0;
        right    : 0;
        bottom   : 0;
    }
}

/// Split `$string` into several parts using `$delimiter`.
/// @since 1.2.0
/// @param {String} $string    - string to split
/// @param {String} $delimiter ('') - string to use as a delimiter to split `$string`
/// @return {List}
@function _ss-str-explode($string, $delimiter : "") {
    $result : ();
    $length : str-length($string);

    @if str-length($delimiter) == 0 {
        @for $i from 1 through $length {
            $result : append($result, str-slice($string, $i, $i));
        }

        @return $result;
    }

    $running : true;
    $remaining : $string;

    @while $running {
        $index : str-index($remaining, $delimiter);

        @if $index {
            $slice : str-slice($remaining, 1, $index - 1);
            $result : append($result, $slice);
            $remaining : str-slice($remaining, $index + str-length($delimiter));
        } @else {
            $running : false;
        }
    }

    @return append($result, $remaining);
}

@function str-explode($string, $delimiter : '') {
    @if type-of($string) != "string" {
        @error "`explode` function expecting a string; #{type-of($string)} given.";
    }

    @if type-of($delimiter) != "string" {
        @error "`explode` function expecting a string; #{type-of($delimiter)} given.";
    }

    @return _ss-str-explode($string, $delimiter);
}


// Read the article: http://sassbreak.com/viewport-relative-headings-with-sass
$max-breakpoint     : 1400;

@function get-vw($target, $max-breakpoint : 1400) {
    $vw-context : ($max-breakpoint * .01) * 1px;
    @return ($target/$vw-context) * 1.0vw;
}

@function vw-calc($target, $scree-width: 1440) {
    // $target : strip-unit($target);
    @return strip-unit($target/$scree-width) * 100vw;
}

@mixin font-size($size, $max-breakpoint : 1400) {
    font-size : rem-calc($size);

    @if ($max-breakpoint!=false) {
        font-size    : get-vw($size, $max-breakpoint);
        $wide-screen : "(min-width: #{$max-breakpoint}px)";
        @media #{$wide-screen} {
            font-size : rem-calc($size);
        }
    }
}

@mixin line-height($size, $max-breakpoint : 1400) {
    line-height : rem-calc($size);

    @if ($max-breakpoint!=false) {
        line-height  : get-vw($size, $max-breakpoint);
        $wide-screen : "(min-width: #{$max-breakpoint}px)";
        @media #{$wide-screen} {
            line-height : rem-calc($size);
        }
    }
}

//@mixin f-size-vw($size, $height: false, $max-breakpoint : 1400) {
//    @include font-size($size, $max-breakpoint);
//    @if ($height != false) {
//        @include line-height($height, $max-breakpoint);
//    }
//}

@mixin f-size-vw($size, $max-breakpoint : 1400) {

    $font-size   : false;
    $line-height : false;

    $size        : str-replace("#{$size}", 'px', '');
    $size        : str-replace("#{$size}", 'em', '');
    $size        : str-replace("#{$size}", 'rem', '');
    $size        : str-replace("#{$size}", 'pt', '');
    $size        : str-replace("#{$size}", '%', '');

    $size        : "#{$size}";

    // @debug $size;

    @if (str-index($size, '/') != null) {
        $size-height : str-explode($size, '/');

        $font-size   : nth($size-height, 1);
        $line-height : nth($size-height, 2);

        $line-height : to-number(unquote("#{$line-height}px"));
    } @else {
        $font-size   : $size;
    }

    $font-size   : to-number(unquote("#{$font-size}px"));

    @include font-size($font-size, $max-breakpoint);
    @if ($line-height != false) {
        @include line-height($line-height, $max-breakpoint);
    }

}

@mixin f-size-rm($size, $height: false, $max-breakpoint : 1400) {
    font-size : rem-calc($size);
    @if ($height != false) {
        line-height : rem-calc($height);
    }
}

@mixin f-family($font-family) {
    font-family : font-family($font-family);
}

//// Mixin
//@mixin vw($size, $type: 'fs') {
//    $prop : 'line-height';
//    @if ($type=='fs') {
//        $prop : 'font-size';
//    }
//    #{$prop} : rem-calc(56px);
//    #{$prop} : get-vw($size);
//
//    @media #{$wide-screen} {
//        #{$prop} : $size;
//    }
//}

/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
    $units : ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

    @if not index(map-keys($units), $unit) {
        //$_: log('Invalid unit `#{$unit}`.');
    }

    @return $value * map-get($units, $unit);
}

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
    @if type-of($value) == 'number' {
        @return $value;
    } @else if type-of($value) != 'string' {
        //$_: log('Value for `to-number` should be a number or a string.');
    }

    $result : 0;
    $digits : 0;
    $minus : str-slice($value, 1, 1) == '-';
    $numbers : ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character : str-slice($value, $i, $i);

        @if not (index(map-keys($numbers), $character) or $character == '.') {
            @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }

        @if $character == '.' {
            $digits : 1;
        } @else if $digits == 0 {
            $result : $result * 10 + map-get($numbers, $character);
        } @else {
            $digits : $digits * 10;
            $result : $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

@mixin f($params...) {

    $size    : false;
    $weight  : false;
    $color   : false;
    $name    : false;
    $style   : false;

    $weights : (normal, ligher, bold, bolder);

    @each $param in $params {

        @if ($param != false) {
            @if (type-of($param)=='color') {
                $color  : $param;
            } @else if (
                    (type-of($param) == 'number' and (type-of($param)!='string' and not index('px' 'em' 'rem' 'pt' '%', unit($param))))
                    or
                    (index($weights, $param))
            ) {
                $weight : $param;
            } @else if (type-of($param)=='string' and str-index($param, 'italic')) {
                $style  : $param;
            } @else if (type-of($param) == 'number' or (type-of($param)=='string' and str-index($param, '/')) or (type-of($param) == 'number' and index('px' 'em' 'rem' 'pt' '%', unit($param)))) {
                $size   : $param;
            } @else {
                $name   : $param;
            }
        }
    }

    //$size, $name : false, $color: false

    @if ($size != false) {
        $font-size   : false;
        $line-height : false;

        $size        : str-replace("#{$size}", 'px', '');
        $size        : str-replace("#{$size}", 'em', '');
        $size        : str-replace("#{$size}", 'rem', '');
        $size        : str-replace("#{$size}", 'pt', '');
        $size        : str-replace("#{$size}", '%', '');

        $size        : "#{$size}";

        @if (str-index($size, '/') != null) {
            $size-height : str-explode($size, '/');

            $font-size   : nth($size-height, 1);
            $line-height : nth($size-height, 2);

            $line-height : to-number(unquote("#{$line-height}px"));
        } @else {
            $font-size   : $size;
        }

        $font-size   : to-number(unquote("#{$font-size}px"));

        font-size    : rem-calc($font-size);

        @if ($line-height != false) {
            line-height : rem-calc($line-height);
        }
    }

    @if ($color != false) {
        color : $color;
    }

    @if ($weight != false) {
        font-weight : $weight;
    }

    @if ($style != false) {
        font-style : $style;
    }

    @if ($name != false) {
        font-family : font-family($name);
    }

}

@function implode($pieces, $glue: "") {
    $result : null;
    @for $i from 1 through length($pieces) {
        $piece : nth($pieces, $i);
        @if type-of($piece) == list {
            $result : unquote("#{$result}#{$glue}#{implode($piece, $glue)}");
        } @else {
            $result : unquote("#{$result}#{$glue}#{$piece}");
        }
    }
    @if $result != null {
        $result : str-slice($result, str-length($glue) + 1, -1);
    }
    @return $result;
}

//@function sqrt($r) {
//    $x0: 1;
//    $x1: $x0;
//
//    @for $i from 1 through 10 {
//        $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
//        $x0: $x1;
//    }
//
//    @return $x1;
//}
//
//@function pow($number, $exponent) {
//    $value: 1;
//
//    @if $exponent > 0 {
//        @for $i from 1 through $exponent {
//            $value: $value * $number;
//        }
//    }
//
//    @return $value;
//}

$default-font-files : woff woff2 ttf svg eot !default;
$include-fonts      : true !default;
@if ($include-fonts and $local-fonts) {
    @each $font in $local-fonts {
        @include custom-font($font, $default-font-files);
    }
}
